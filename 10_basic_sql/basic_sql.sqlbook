-- SQLBook: Markup
1. Посчитайте, сколько компаний закрылось.
-- SQLBook: Code
SELECT COUNT(c.name)
FROM company AS c
WHERE status = 'closed'
-- SQLBook: Markup
2. Отобразите количество привлечённых средств для новостных компаний США. Используйте данные из таблицы company. Отсортируйте таблицу по убыванию значений в поле funding_total .
-- SQLBook: Code
SELECT c.funding_total
FROM company AS c
WHERE category_code = 'news'
  AND country_code = 'USA'
ORDER BY c.funding_total DESC
-- SQLBook: Markup
3. Найдите общую сумму сделок по покупке одних компаний другими в долларах. Отберите сделки, которые осуществлялись только за наличные с 2011 по 2013 год включительно.
-- SQLBook: Code
SELECT SUM(a.price_amount)
FROM acquisition as a 
WHERE term_code = 'cash'
  AND CAST(a.acquired_at AS DATE) BETWEEN '2011-01-01' AND '2013-12-31';
-- SQLBook: Markup
4. Отобразите имя, фамилию и названия аккаунтов людей в твиттере, у которых названия аккаунтов начинаются на 'Silver'.
-- SQLBook: Code
SELECT p.first_name,
       p.last_name,
       p.twitter_username
FROM people as p
WHERE p.twitter_username LIKE 'Silver%'  
-- SQLBook: Markup
5. Выведите на экран всю информацию о людях, у которых названия аккаунтов в твиттере содержат подстроку 'money', а фамилия начинается на 'K'.
-- SQLBook: Code
SELECT *
FROM people as p
WHERE p.twitter_username LIKE '%money%'
  AND p.last_name LIKE 'K%'
-- SQLBook: Markup
6. Для каждой страны отобразите общую сумму привлечённых инвестиций, которые получили компании, зарегистрированные в этой стране. Страну, в которой зарегистрирована компания, можно определить по коду страны. Отсортируйте данные по убыванию суммы.
-- SQLBook: Code
SELECT country_code,
       SUM(funding_total) AS total
FROM company
GROUP BY country_code
ORDER BY total DESC
-- SQLBook: Markup
7. Составьте таблицу, в которую войдёт дата проведения раунда, а также минимальное и максимальное значения суммы инвестиций, привлечённых в эту дату.
Оставьте в итоговой таблице только те записи, в которых минимальное значение суммы инвестиций не равно нулю и не равно максимальному значению.
-- SQLBook: Code
SELECT funded_at,
       MIN(raised_amount),
       MAX(raised_amount)
FROM funding_round
GROUP BY funded_at
HAVING MIN(raised_amount) <> 0 
   AND MIN(raised_amount) <> MAX(raised_amount);
-- SQLBook: Markup
8. Создайте поле с категориями:
Для фондов, которые инвестируют в 100 и более компаний, назначьте категорию high_activity.
Для фондов, которые инвестируют в 20 и более компаний до 100, назначьте категорию middle_activity.
Если количество инвестируемых компаний фонда не достигает 20, назначьте категорию low_activity.
Отобразите все поля таблицы fund и новое поле с категориями.
-- SQLBook: Code
SELECT *,
      CASE
          WHEN invested_companies >= 100 THEN 'high_activity'
          WHEN invested_companies >= 20 AND invested_companies < 100 THEN 'middle_activity'
          WHEN invested_companies < 20 THEN 'low_activity'
      END
FROM fund
-- SQLBook: Markup
9. Для каждой из категорий, назначенных в предыдущем задании, посчитайте округлённое до ближайшего целого числа среднее количество инвестиционных раундов, в которых фонд принимал участие. Выведите на экран категории и среднее число инвестиционных раундов. Отсортируйте таблицу по возрастанию среднего.
-- SQLBook: Code
SELECT 
       CASE
           WHEN invested_companies>=100 THEN 'high_activity'
           WHEN invested_companies>=20 THEN 'middle_activity'
           ELSE 'low_activity'
       END AS activity,
       ROUND(AVG(investment_rounds)) AS average
FROM fund
GROUP BY activity
ORDER BY average;
-- SQLBook: Markup

10. Проанализируйте, в каких странах находятся фонды, которые чаще всего инвестируют в стартапы. 
Для каждой страны посчитайте минимальное, максимальное и среднее число компаний, в которые инвестировали фонды этой страны, основанные с 2010 по 2012 год включительно. Исключите страны с фондами, у которых минимальное число компаний, получивших инвестиции, равно нулю. Выгрузите десять самых активных стран-инвесторов.
Отсортируйте таблицу по среднему количеству компаний от большего к меньшему, а затем по коду страны в лексикографическом порядке.
-- SQLBook: Code
SELECT country_code,
       MIN(invested_companies),
       MAX(invested_companies),
       AVG(invested_companies)
FROM fund
WHERE EXTRACT(YEAR FROM CAST(founded_at AS DATE)) BETWEEN '2010' AND '2012'
GROUP BY country_code
HAVING MIN(invested_companies) <> 0
ORDER BY AVG(invested_companies) DESC, country_code
LIMIT 10;
-- SQLBook: Markup
11. Отобразите имя и фамилию всех сотрудников стартапов. Добавьте поле с названием учебного заведения, которое окончил сотрудник, если эта информация известна.
-- SQLBook: Code
SELECT p.first_name,
       p.last_name,
       e.instituition
FROM people as p
LEFT JOIN education as e ON p.id=e.person_id;
-- SQLBook: Markup
12. Для каждой компании найдите количество учебных заведений, которые окончили её сотрудники. Выведите название компании и число уникальных названий учебных заведений. Составьте топ-5 компаний по количеству университетов.
-- SQLBook: Code
SELECT c.name AS company_name,
       COUNT (DISTINCT e.instituition) AS number_instituition
FROM company as c
INNER JOIN people AS p ON c.id=p.company_id
INNER JOIN education AS e ON p.id=e.person_id
GROUP BY company_name
ORDER BY number_instituition DESC
LIMIT 5;
-- SQLBook: Markup
13. Составьте список с уникальными названиями закрытых компаний, для которых первый раунд финансирования оказался последним.
-- SQLBook: Code
SELECT DISTINCT c.name
FROM company AS c
INNER JOIN funding_round as fr ON c.id=fr.company_id
WHERE c.status = 'closed'
  AND fr.is_first_round = 1
  AND fr.is_last_round = 1;
-- SQLBook: Markup
14. Составьте список уникальных номеров сотрудников, которые работают в компаниях, отобранных в предыдущем задании.
-- SQLBook: Code
SELECT DISTINCT p.id
FROM people AS p
WHERE p.company_id IN (SELECT c.id
                       FROM company AS c
                       INNER JOIN funding_round as fr ON c.id=fr.company_id
                       WHERE c.status = 'closed'
                         AND fr.is_first_round = 1
                         AND fr.is_last_round = 1);
-- SQLBook: Markup
15. Составьте таблицу, куда войдут уникальные пары с номерами сотрудников из предыдущей задачи и учебным заведением, которое окончил сотрудник.
-- SQLBook: Code
SELECT DISTINCT p.id,
       e.instituition
FROM people AS p
JOIN education AS e ON p.id=e.person_id
WHERE p.id IN (SELECT DISTINCT p.id
               FROM people AS p
               WHERE p.company_id IN (SELECT c.id
                                      FROM company AS c
                                      INNER JOIN funding_round as fr ON c.id=fr.company_id
                                      WHERE c.status = 'closed'
                                        AND fr.is_first_round = 1
                                        AND fr.is_last_round = 1))
-- SQLBook: Markup
16. Посчитайте количество учебных заведений для каждого сотрудника из предыдущего задания. При подсчёте учитывайте, что некоторые сотрудники могли окончить одно и то же заведение дважды.
-- SQLBook: Code
SELECT DISTINCT p.id,
       COUNT(e.instituition)
FROM people AS p
JOIN education AS e ON p.id=e.person_id
WHERE p.id IN (SELECT DISTINCT p.id
               FROM people AS p
               WHERE p.company_id IN (SELECT c.id
                                      FROM company AS c
                                      INNER JOIN funding_round as fr ON c.id=fr.company_id
                                      WHERE c.status = 'closed'
                                        AND fr.is_first_round = 1
                                        AND fr.is_last_round = 1))
GROUP BY p.id     
-- SQLBook: Markup
17. Дополните предыдущий запрос и выведите среднее число учебных заведений (всех, не только уникальных), которые окончили сотрудники разных компаний. Нужно вывести только одну запись, группировка здесь не понадобится.
-- SQLBook: Code
SELECT AVG(i.number_of_institution)
FROM
    (SELECT DISTINCT p.id,
           COUNT(e.instituition) AS number_of_institution
    FROM people AS p
    JOIN education AS e ON p.id=e.person_id
    WHERE p.id IN (SELECT DISTINCT p.id
                   FROM people AS p
                   WHERE p.company_id IN (SELECT c.id
                                          FROM company AS c
                                          INNER JOIN funding_round as fr ON c.id=fr.company_id
                                          WHERE c.status = 'closed'
                                            AND fr.is_first_round = 1
                                            AND fr.is_last_round = 1))
    GROUP BY p.id) AS i   
-- SQLBook: Markup
18. Напишите похожий запрос: выведите среднее число учебных заведений (всех, не только уникальных), которые окончили сотрудники Facebook*.

*(сервис, запрещённый на территории РФ)
-- SQLBook: Code
WITH base AS 
            (SELECT p.id,
             COUNT(e.instituition)
             FROM people AS p
             RIGHT JOIN education AS e ON p.id = e.person_id
             WHERE p.company_id IN
                                  (SELECT id
                                   FROM company
                                   WHERE name = 'Facebook')
                                   GROUP BY p.id)
SELECT AVG(COUNT)
FROM base;  
-- SQLBook: Markup
19. Составьте таблицу из полей:
name_of_fund — название фонда;
name_of_company — название компании;
amount — сумма инвестиций, которую привлекла компания в раунде.
В таблицу войдут данные о компаниях, в истории которых было больше шести важных этапов, а раунды финансирования проходили с 2012 по 2013 год включительно.
-- SQLBook: Code
SELECT f.name AS name_of_fund,
       c.name AS name_of_company,
       fr.raised_amount AS amount
FROM investment AS i
LEFT JOIN company AS c ON c.id = i.company_id
LEFT JOIN fund AS f ON i.fund_id = f.id
INNER JOIN 
        (SELECT*
         FROM funding_round
         WHERE funded_at BETWEEN '2012-01-01' AND '2013-12-31')
         AS fr ON fr.id = i.funding_round_id
WHERE c.milestones > 6;
-- SQLBook: Markup
20. Выгрузите таблицу, в которой будут такие поля:
название компании-покупателя;
сумма сделки;
название компании, которую купили;
сумма инвестиций, вложенных в купленную компанию;
доля, которая отображает, во сколько раз сумма покупки превысила сумму вложенных в компанию инвестиций, округлённая до ближайшего целого числа.
Не учитывайте те сделки, в которых сумма покупки равна нулю. Если сумма инвестиций в компанию равна нулю, исключите такую компанию из таблицы. 
Отсортируйте таблицу по сумме сделки от большей к меньшей, а затем по названию купленной компании в лексикографическом порядке. Ограничьте таблицу первыми десятью записями.
-- SQLBook: Code
WITH 
acquiring AS
            (SELECT c.name AS buyer,
                    a.price_amount AS price,
                    a.id AS KEY
             FROM acquisition AS a
             LEFT JOIN company AS c ON a.acquiring_company_id = c.id
             WHERE a.price_amount > 0),
acquired AS
            (SELECT c.name AS acquisition,
                    c.funding_total AS investment,
                    a.id AS KEY
             FROM acquisition AS a
             LEFT JOIN company AS c ON a.acquired_company_id = c.id
             WHERE c.funding_total > 0)

SELECT acqB.buyer,
       acqB.price,
       acqS.acquisition,
       acqS.investment,
       ROUND(acqB.price/acqS.investment) AS percentage
FROM acquiring AS acqB 
JOIN acquired AS acqS ON acqB.KEY = acqS.KEY

ORDER BY acqB.price DESC, acqS.acquisition
LIMIT 10;
-- SQLBook: Markup
21. Выгрузите таблицу, в которую войдут названия компаний из категории social, получившие финансирование с 2010 по 2013 год включительно. Проверьте, что сумма инвестиций не равна нулю. Выведите также номер месяца, в котором проходил раунд финансирования.
-- SQLBook: Code
SELECT c.name,
       EXTRACT(MONTH FROM CAST(fr.funded_at AS DATE))
FROM company AS c
LEFT JOIN funding_round AS fr ON c.id=fr.company_id
WHERE c.category_code = 'social'
  AND CAST(fr.funded_at AS DATE) BETWEEN '2010-01-01' AND '2013-12-31'
  AND fr.raised_amount > 0
-- SQLBook: Markup
22. Отберите данные по месяцам с 2010 по 2013 год, когда проходили инвестиционные раунды. Сгруппируйте данные по номеру месяца и получите таблицу, в которой будут поля:
номер месяца, в котором проходили раунды;
количество уникальных названий фондов из США, которые инвестировали в этом месяце;
количество компаний, купленных за этот месяц;
общая сумма сделок по покупкам в этом месяце.
-- SQLBook: Code
WITH
rounds AS
(SELECT EXTRACT(MONTH FROM CAST(fr.funded_at AS DATE)) AS month,
       COUNT(DISTINCT f.name) AS funds
FROM funding_round AS fr
INNER JOIN investment AS i ON fr.id=i.funding_round_id
INNER JOIN fund AS f ON i.fund_id=f.id
WHERE CAST(fr.funded_at AS DATE) BETWEEN '2010-01-01' AND '2013-12-31'
  AND f.country_code = 'USA'
GROUP BY month),

companies AS 
(SELECT EXTRACT(MONTH FROM CAST(a.acquired_at AS DATE)) AS month,
       COUNT(a.acquired_company_id) AS acquired_companies,
       SUM(a.price_amount) AS total_sales
FROM acquisition AS a
WHERE CAST(a.acquired_at AS DATE) BETWEEN '2010-01-01' AND '2013-12-31'
GROUP BY month)

SELECT rnd.month,
       rnd.funds,
       cmp.acquired_companies,
       cmp.total_sales
FROM rounds AS rnd
JOIN companies AS cmp ON rnd.month=cmp.month
-- SQLBook: Markup
23. Составьте сводную таблицу и выведите среднюю сумму инвестиций для стран, в которых есть стартапы, зарегистрированные в 2011, 2012 и 2013 годах. Данные за каждый год должны быть в отдельном поле. Отсортируйте таблицу по среднему значению инвестиций за 2011 год от большего к меньшему.
-- SQLBook: Code
WITH
avg2011 AS
(SELECT c.country_code AS country,
       AVG(c.funding_total) AS avg_2011
FROM company AS c
WHERE EXTRACT(YEAR FROM CAST(c.founded_at AS DATE)) IN (2011,2012,2013)
GROUP BY country, EXTRACT(YEAR FROM founded_at)
HAVING EXTRACT(YEAR FROM founded_at) = '2011'),

avg2012 AS 
(SELECT c.country_code AS country,
       AVG(c.funding_total) AS avg_2012
FROM company AS c
WHERE EXTRACT(YEAR FROM CAST(c.founded_at AS DATE)) IN (2011,2012,2013)
GROUP BY country, EXTRACT(YEAR FROM founded_at)
HAVING EXTRACT(YEAR FROM founded_at) = '2012'),

avg2013 AS 
(SELECT c.country_code AS country,
       AVG(c.funding_total) AS avg_2013
FROM company AS c
WHERE EXTRACT(YEAR FROM CAST(c.founded_at AS DATE)) IN (2011,2012,2013)
GROUP BY country, EXTRACT(YEAR FROM founded_at)
HAVING EXTRACT(YEAR FROM founded_at) = '2013')

SELECT avg2011.country,
       avg2011.avg_2011,
       avg2012.avg_2012,
       avg2013.avg_2013
FROM avg2011 
JOIN avg2012 ON avg2011.country=avg2012.country  
JOIN avg2013 ON avg2011.country=avg2013.country 
ORDER BY avg2011.avg_2011 DESC